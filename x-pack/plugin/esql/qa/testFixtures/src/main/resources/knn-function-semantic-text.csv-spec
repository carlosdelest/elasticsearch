testKnnWithSemanticText
required_capability: knn_function_v4

from semantic_text
| where knn(semantic_text_dense_field, [0, 1, 2], 10)
| keep semantic_text_dense_field
| sort semantic_text_dense_field asc
;

semantic_text_dense_field:text
all we have to decide is what to do with the time that is given to us
be excellent to each other
live long and prosper
;

testKnnWithSemanticTextAndKeyword
required_capability: knn_function_v4

from semantic_text
| where knn(semantic_text_dense_field, [0, 1, 2], 10)
| keep semantic_text_dense_field, host
| sort host asc
;

semantic_text_dense_field:text | host:keyword
live long and prosper                                                 | host1
all we have to decide is what to do with the time that is given to us | host2
be excellent to each other                                            | host3

;

testKnnWithSemanticTextMultiValueField
required_capability: knn_function_v4

from semantic_text metadata _id
| where match(st_multi_value, "something") AND match(host, "host1")
| keep _id, st_multi_value
;

_id: keyword | st_multi_value:text
1            | ["Hello there!", "This is a random value", "for testing purposes"]
;

testKnnWithSemanticTextWithEvalsAndOtherFunctionsAndStats
required_capability: knn_function_v4

from semantic_text
| where qstr("description:some*")
| eval size = mv_count(st_multi_value)
| where knn(semantic_text_dense_field, [0, 1, 2], 10)
| STATS result = count(*)
;

result:long
3
;

testKnnWithSemanticTextAndKql
required_capability: knn_function_v4
required_capability: kql_function

from semantic_text
| where kql("host:host1") AND knn(semantic_text_dense_field, [0, 1, 2], 10)
| KEEP host, semantic_text_dense_field
;

host:keyword | semantic_text_dense_field:text
"host1"      | live long and prosper
;

testKnnWithOptionsFuzziness
required_capability: knn_function_v4
required_capability: knn_function_v4_options

from books 
| where match(title, "Pings", {"fuzziness": 1})  
| keep book_no;
ignoreOrder:true

book_no:keyword
2714
2675
4023
7140
;

testKnnWithOptionsOperator
required_capability: knn_function_v4
required_capability: knn_function_v4_options

// tag::match-with-named-function-params[]
FROM books
| WHERE MATCH(title, "Hobbit Back Again", {"operator": "AND"})
| KEEP title;
// end::match-with-named-function-params[]

// tag::match-with-named-function-params-result[]
title:text
The Hobbit or There and Back Again
// end::match-with-named-function-params-result[]
;

testKnnWithOptionsMinimumShouldKnn
required_capability: knn_function_v4
required_capability: knn_function_v4_options

from books 
| where match(title, "Hobbit Back Again", {"minimum_should_match": 2})
| keep title;

title:text
The Hobbit or There and Back Again
;

testKnnWithNonPushableDisjunctions
required_capability: knn_function_v4
required_capability: full_text_functions_disjunctions_compute_engine

from books 
| where match(title, "lord") or length(title) > 130 
| keep book_no
;
ignoreOrder: true

book_no:keyword
2675   
2714   
4023   
7140   
8678
;

testKnnWithNonPushableDisjunctionsOnComplexExpressions
required_capability: knn_function_v4
required_capability: full_text_functions_disjunctions_compute_engine

from books 
| where (match(title, "lord") and ratings > 4.5) or (match(author, "dostoevsky") and length(title) > 50)
| keep book_no
;
ignoreOrder: true

book_no:keyword
2675
2924
4023
1937
7140
2714
;

testKnnInStatsNonPushable
required_capability: knn_function_v4
required_capability: full_text_functions_in_stats_where

from books 
| where length(title) > 40 
| stats c = count(*) where match(title, "Lord")
;

c:long
3
;

testKnnInStatsPushableAndNonPushable
required_capability: knn_function_v4
required_capability: full_text_functions_in_stats_where

from books 
| stats c = count(*) where (match(title, "lord") and ratings > 4.5) or (match(author, "dostoevsky") and length(title) > 50)
;

c:long
6
;

testKnnInStatsPushable
required_capability: knn_function_v4
required_capability: full_text_functions_in_stats_where

from books 
| stats c = count(*) where match(author, "tolkien")
;

c:long
22
;

testKnnInStatsWithOptions
required_capability: knn_function_v4
required_capability: full_text_functions_in_stats_where

FROM books
| STATS c = count(*) where match(title, "Hobbit Back Again", {"operator": "AND"})
;

c:long
1
;

testKnnInStatsWithNonPushableDisjunctions
required_capability: knn_function_v4
required_capability: full_text_functions_in_stats_where

FROM books
| STATS c = count(*) where match(title, "lord") or length(title) > 130 
;

c:long
5
;

testKnnInStatsWithMultipleAggs
required_capability: knn_function_v4
required_capability: full_text_functions_in_stats_where
FROM books
| STATS c = count(*) where match(title, "lord"), m = max(book_no::integer) where match(author, "tolkien"), n = min(book_no::integer) where match(author, "dostoevsky") 
;

c:long | m:integer | n:integer
4      | 9607      | 1211
;


testKnnInStatsWithGrouping
required_capability: knn_function_v4
required_capability: full_text_functions_in_stats_where
FROM books
| STATS r = AVG(ratings) where match(title, "Lord Rings", {"operator": "AND"}) by author | WHERE r is not null
;
ignoreOrder: true

r:double           | author: text
4.75               | Alan Lee                 
4.674999952316284  | J. R. R. Tolkien         
4.670000076293945  | John Ronald Reuel Tolkien
4.670000076293945  | Agnes Perkins            
4.670000076293945  | Charles Adolph Huttar    
4.670000076293945  | Walter Scheps            
4.559999942779541  | J.R.R. Tolkien           
;

testKnnInStatsWithGroupingBy
required_capability: knn_function_v4
required_capability: full_text_functions_in_stats_where
FROM airports 
| STATS c = COUNT(*) where match(country, "United States") BY scalerank
| SORT scalerank desc
;

c: long     |   scalerank: long   
0              | 9              
44             | 8              
10             | 7              
28             | 6              
10             | 5              
12             | 4              
10             | 3              
15             | 2              
;


testKnnWithReplace
required_capability: knn_function_v4
required_capability: no_plain_strings_in_literals
from books 
| keep book_no, author 
| where match(author, REPLACE("FaulkneX", "X", "r"))
| sort book_no 
| limit 5;

book_no:keyword | author:text
2378            | [Carol Faulkner, Holly Byers Ochoa, Lucretia Mott]
2713            | William Faulkner
2847            | Colleen Faulkner
2883            | William Faulkner
3293            | Danny Faulkner
;

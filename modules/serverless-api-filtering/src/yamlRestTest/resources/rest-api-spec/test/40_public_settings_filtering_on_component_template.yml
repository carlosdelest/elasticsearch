---
"Create component template setting as an operator, filter for non-operator":
  - skip:
      features:  [ "allowed_warnings" ,"headers"]
  - do:
      headers: { Authorization: "Basic eF9wYWNrX3Jlc3RfdXNlcjp4LXBhY2stdGVzdC1wYXNzd29yZA==" } # x_pack_rest_user, an operator
      cluster.put_component_template:
          name: test-ct
          body:
            template:
                settings:
                  number_of_replicas: "0" #non-public setting
                  query_string.lenient: "true" #public setting
  - match: {acknowledged: true}

  - do:
      headers: { Authorization: "Basic eF9wYWNrX3Jlc3RfdXNlcjp4LXBhY2stdGVzdC1wYXNzd29yZA==" } # x_pack_rest_user, an operator
      cluster.get_component_template:
        name: test-ct

  - match: {component_templates.0.component_template.template.settings: {index: {query_string: {"lenient": "true"} , number_of_replicas: '0'}}}

  - do:
      cluster.get_component_template:
        name: test-ct

  - match: { component_templates.0.component_template.template.settings: { index: { query_string: { "lenient": "true" } } }}


  - do:
      allowed_warnings:
        - "index template [my-template] has index patterns [baz*] matching patterns from existing older templates [global] with patterns (global => [*]); this template [my-template] will take precedence during new index creation"
      indices.put_index_template:
        name: my-template
        body:
          index_patterns: ["test_index*"]
          composed_of: ["test-ct"]


# create index using a template as a non-operator
  - do:
      indices.create:
        index: test_index
  - match: {acknowledged: true}

# a non-public setting is set on the index created by non-operator matching a component template created by operator
  - do:
      headers: { Authorization: "Basic eF9wYWNrX3Jlc3RfdXNlcjp4LXBhY2stdGVzdC1wYXNzd29yZA==" } # x_pack_rest_user, an operator
      indices.get_settings:
        index: test_index
        flat_settings: false

  - match: { test_index.settings.index.query_string.lenient: "true" }
  - match: { test_index.settings.index.number_of_replicas: "0"}

#a non operator does not see a non-public setting
  - do:
      indices.get_settings:
        index: test_index
        flat_settings: false

  - match: { test_index.settings.index.query_string.lenient: "true"}
